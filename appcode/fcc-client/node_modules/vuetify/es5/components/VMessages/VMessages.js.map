{"version":3,"sources":["../../../src/components/VMessages/VMessages.ts"],"names":[],"mappings":";;;;;;;AACA;;AAGA;;AACA;;AAKA;;AAGA;;;;AAbA;AAGA;AASA;;AAMA;gBACe,qBAAO,kBAAP,EAAkB,kBAAlB,EAA6B,MAA7B,CAAoC;AACjD,EAAA,IAAI,EAAE,YAD2C;AAGjD,EAAA,KAAK,EAAE;AACL,IAAA,KAAK,EAAE;AACL,MAAA,IAAI,EAAE,KADD;AAEL,MAAA,OAAO,EAAE;AAAA,eAAO,EAAP;AAAA;AAFJ;AADF,GAH0C;AAUjD,EAAA,OAAO,EAAE;AACP,IAAA,WADO,yBACI;AACT,aAAO,KAAK,cAAL,CAAoB,kBAApB,EAAwC;AAC7C,QAAA,WAAW,EAAE,qBADgC;AAE7C,QAAA,KAAK,EAAE;AACL,UAAA,IAAI,EAAE,oBADD;AAEL,UAAA,GAAG,EAAE;AAFA;AAFsC,OAAxC,EAMJ,KAAK,KAAL,CAAW,GAAX,CAAe,KAAK,UAApB,CANI,CAAP;AAOD,KATM;AAUP,IAAA,UAVO,sBAUK,OAVL,EAUsB,GAVtB,EAUiC;AACtC,UAAM,IAAI,GAAG,sBAAQ,IAAR,EAAc,SAAd,EAAyB;AAAE,QAAA,OAAO,EAAP,OAAF;AAAW,QAAA,GAAG,EAAH;AAAX,OAAzB,CAAb;AACA,UAAM,WAAW,GAAG,yBAAW,OAAX,CAApB;AACA,UAAM,SAAS,GAAG,CAAC,IAAD,GAAQ,WAAR,GAAsB,SAAxC;AAEA,aAAO,KAAK,cAAL,CAAoB,KAApB,EAA2B;AAChC,QAAA,WAAW,EAAE,qBADmB;AAEhC,QAAA,GAAG,EAAH,GAFgC;AAGhC,QAAA,QAAQ,EAAE;AAAE,UAAA,SAAS,EAAT;AAAF;AAHsB,OAA3B,EAIJ,IAJI,CAAP;AAKD;AApBM,GAVwC;AAiCjD,EAAA,MAjCiD,kBAiCzC,CAjCyC,EAiCxC;AACP,WAAO,CAAC,CAAC,KAAD,EAAQ,KAAK,YAAL,CAAkB,KAAK,KAAvB,EAA8B;AAC5C,MAAA,WAAW,EAAE,YAD+B;AAE5C,MAAA,KAAK,EAAE,KAAK;AAFgC,KAA9B,CAAR,EAGJ,CAAC,KAAK,WAAL,EAAD,CAHI,CAAR;AAID;AAtCgD,CAApC,C","sourcesContent":["// Styles\nimport './VMessages.sass'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport Themeable from '../../mixins/themeable'\n\n// Types\nimport { VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\nimport mixins from '../../util/mixins'\n\n// Utilities\nimport {\n  escapeHTML,\n  getSlot,\n} from '../../util/helpers'\n\n/* @vue/component */\nexport default mixins(Colorable, Themeable).extend({\n  name: 'v-messages',\n\n  props: {\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n  },\n\n  methods: {\n    genChildren () {\n      return this.$createElement('transition-group', {\n        staticClass: 'v-messages__wrapper',\n        attrs: {\n          name: 'message-transition',\n          tag: 'div',\n        },\n      }, this.value.map(this.genMessage))\n    },\n    genMessage (message: string, key: number) {\n      const slot = getSlot(this, 'default', { message, key })\n      const escapedHTML = escapeHTML(message)\n      const innerHTML = !slot ? escapedHTML : undefined\n\n      return this.$createElement('div', {\n        staticClass: 'v-messages__message',\n        key,\n        domProps: { innerHTML },\n      }, slot)\n    },\n  },\n\n  render (h): VNode {\n    return h('div', this.setTextColor(this.color, {\n      staticClass: 'v-messages',\n      class: this.themeClasses,\n    }), [this.genChildren()])\n  },\n})\n"],"sourceRoot":"","file":"VMessages.js"}